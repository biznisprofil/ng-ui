{
    "pipes": [],
    "interfaces": [
        {
            "name": "IMyComponentProps",
            "id": "interface-IMyComponentProps-e9d6e0d38ee762fe77631359c646c6cc",
            "file": "projects/react-components/counter-component/CounterComponent.tsx",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import './CounterComponent.scss';\r\n\r\nimport * as React from 'react';\r\n\r\nimport { FunctionComponent } from 'react';\r\n\r\nexport interface IMyComponentProps {\r\n  counter: number;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport const CounterComponent: FunctionComponent<IMyComponentProps> = (props: IMyComponentProps) => {\r\n\r\n  const {counter: propsCounter, onClick} = props;\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  return <div className={`counter-component`}>\r\n    <div className={'comp-props'}>Tasks counter: {propsCounter}\r\n      <span onClick={handleClick}\r\n            className={'increase-button'}>Remove last one</span>\r\n    </div>\r\n  </div>;\r\n};\r\n",
            "properties": [
                {
                    "name": "counter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-0543044d140f9347f8258d76e0d55088",
            "file": "projects/web-todo-app/src/app/components/task/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id: string;\r\n  title: string;\r\n  state: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CalendarService",
            "id": "injectable-CalendarService-27cc5956080907da86f07672eb1e9beb",
            "file": "projects/calendar/src/lib/calendar.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalendarService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "PrimaryButtonService",
            "id": "injectable-PrimaryButtonService-dc7be47bcbfc402d4767c9a168bbe054",
            "file": "projects/primary-button/src/lib/primary-button.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrimaryButtonService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-33e1c9f6a928615b62e5bac0b054dcc1",
            "file": "projects/web-todo-app/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'web-todo-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'web-todo-app';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-task></app-task>\n"
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-29a1136178059bbefe14eabf2ffd2052",
            "file": "projects/calendar/src/lib/calendar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "datePickerValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewEncapsulation,\n} from '@angular/core'\n\n@Component({\n  selector: 'ui-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CalendarComponent {\n\n  @Input() datePickerValue: string\n\n  constructor(\n  ) {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../node_modules/@syncfusion/ej2-buttons/styles/fabric.css';\r\n@import '../../../../node_modules/@syncfusion/ej2-calendars/styles/fabric.css';\r\n\r\n.data-picker-container {\r\n  .predefined-fields-container {\r\n    width: 100%;\r\n    border: none;\r\n    z-index: 1000;\r\n    cursor: pointer;\r\n    color: blue;\r\n    text-decoration: underline;\r\n    padding-left: 15px;\r\n    img {\r\n      margin-right: 5px;\r\n    }\r\n    .e-float-input .e-clear-icon::before,\r\n    .e-float-input.e-control-wrapper .e-clear-icon::before,\r\n    .e-input-group .e-clear-icon::before,\r\n    .e-input-group.e-control-wrapper .e-clear-icon::before {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n  .e-calendar,\r\n  .e-lib .e-keyboard {\r\n    max-width: 100%;\r\n  }\r\n  .calculatedDate {\r\n    float: right;\r\n    color: silver;\r\n    text-transform: capitalize;\r\n  }\r\n}\r\n.data-picker-container.e-datepicker.e-popup-wrapper {\r\n  top: 349.5px;\r\n  position: fixed;\r\n  z-index: 1004;\r\n  width: 20%;\r\n  height: auto;\r\n  background-color: white;\r\n  .calendar-predefined-fields {\r\n    padding: 0 17px 17px 17px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<div class=\"data-picker-container\">\r\n  <h1>Datepicker</h1>\r\n  <ejs-calendar></ejs-calendar>\r\n</div>\r\n"
        },
        {
            "name": "PrimaryButtonComponent",
            "id": "component-PrimaryButtonComponent-4777eb2abf24d49e4ed30201ee31e9a3",
            "file": "projects/primary-button/src/lib/primary-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-primary-button",
            "styleUrls": [
                "./primary-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./primary-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClicked",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'ui-primary-button',\n  templateUrl: './primary-button.component.html',\n  styleUrls: ['./primary-button.component.scss']\n})\nexport class PrimaryButtonComponent implements OnInit {\n\n  @Input() text: string;\n  @Input() backgroundColor?: string;\n  @Input() disabled: boolean;\n\n  @Output() onClicked = new EventEmitter<string>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onClick() {\n    this.onClicked.emit('button cliked');\n  }\n\n  onCancel() {\n    alert('Cancel event!');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button-container {\r\n  padding: 10px;\r\n  button {\r\n    margin-left: 10px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./primary-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"button-container\" [ngStyle]=\"{'background-color': backgroundColor }\">\r\n  <button ejs-button cssClass=\"e-primary\" (click)=\"onClick()\" [disabled]=\"disabled\">{{text}}</button>\r\n\r\n  <button ejs-button cssClass=\"e-warning\" (click)=\"onCancel()\">Cancel</button>\r\n</div>\r\n"
        },
        {
            "name": "ReactComponentWrapperComponent",
            "id": "component-ReactComponentWrapperComponent-7b4d8be994e6dde62b266a9e66add490",
            "file": "projects/react-components/counter-component/ReactComponentWrapper.tsx",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-counter-component",
            "styleUrls": [
                "./CounterComponent.scss"
            ],
            "styles": [],
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "counter",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "componentClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "containerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "containerElementName, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDivClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { CounterComponent } from './CounterComponent';\r\n\r\nconst containerElementName = 'counterReactComponentContainer';\r\n\r\n@Component({\r\n  selector: 'app-counter-component',\r\n  template: `<span #${containerElementName}></span>`,\r\n  styleUrls: ['./CounterComponent.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ReactComponentWrapperComponent implements OnChanges, OnDestroy, AfterViewInit {\r\n  @ViewChild(containerElementName, {static: true}) containerRef: ElementRef;\r\n\r\n  @Input() public counter = 10;\r\n  @Output() public componentClick = new EventEmitter<void>();\r\n\r\n  constructor() {\r\n    this.handleDivClicked = this.handleDivClicked.bind(this);\r\n  }\r\n\r\n  public handleDivClicked() {\r\n    if (this.componentClick) {\r\n      this.componentClick.emit();\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.render();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.render();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    ReactDOM.unmountComponentAtNode(this.containerRef.nativeElement);\r\n  }\r\n\r\n  private render() {\r\n    const {counter} = this;\r\n\r\n    ReactDOM.render(<div className={'i-am-classy'}>\r\n      <CounterComponent counter={counter} onClick={this.handleDivClicked}/>\r\n    </div>, this.containerRef.nativeElement);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n.counter-component {\r\n  background-color: #1eb4d1;\r\n  border: 1px solid #198aa2;\r\n  display: inline-block;\r\n  user-select: none;\r\n  padding: 20px;\r\n  .comp-props {\r\n    color: white;\r\n    .increase-button {\r\n      background-color: white;\r\n      margin-left: 40px;\r\n      padding: 4px 6px;\r\n      cursor: pointer;\r\n      color: black;\r\n      &:hover {\r\n        filter: drop-shadow(2px 4px 6px black);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./CounterComponent.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnChanges",
                "OnDestroy",
                "AfterViewInit"
            ]
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-e6a5971f44236dadeaa57105c466b895",
            "file": "projects/web-todo-app/src/app/components/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [
                "./task.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "defaultValue": "{id: '1', title: 'default', state: 'TASK_DEFAULT'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Task"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "handleOnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDownEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { Task } from './task.model';\r\n\r\n@Component({\r\n  selector: 'app-task',\r\n  templateUrl: './task.component.html',\r\n  styleUrls: ['./task.component.scss'],\r\n})\r\nexport class TaskComponent {\r\n  @Input() task: Task = {id: '1', title: 'default', state: 'TASK_DEFAULT'}\r\n\r\n  public counter = 0;\r\n\r\n  tasks:Task[] = []\r\n\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  onPin(id: any) {\r\n    this.onPinTask.emit(id);\r\n  }\r\n\r\n  onArchive(id: any) {\r\n    this.onArchiveTask.emit(id);\r\n  }\r\n\r\n  handleOnClick() {\r\n    this.tasks.pop();\r\n    this.counter = this.tasks.length;\r\n  }\r\n\r\n  onClick(event:string) {\r\n    const task = {id: String(Math.random()), title: event, state: 'TASK_PINNED'}\r\n    this.tasks.push(task)\r\n    this.counter = this.tasks.length;\r\n  }\r\n\r\n  onKeyDownEvent(event) {\r\n    const task = {id: String(Math.random()), title: event.target.value, state: 'TASK_DEFAULT'}\r\n    this.tasks.push(task)\r\n    this.counter = this.tasks.length;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-item {\r\n\r\n\r\n  // Layout of list-item children\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: 3rem;\r\n  width: 100%;\r\n  background: silver;\r\n  transition: all ease-out 150ms;\r\n\r\n  .title {\r\n    flex: 1;\r\n  }\r\n\r\n  // Style of list-item children\r\n  input[type=\"text\"] {\r\n    background: transparent;\r\n    width: 100%;\r\n\r\n    &:focus {\r\n      cursor: text;\r\n    }\r\n  }\r\n\r\n  .actions {\r\n    transition: all 200ms ease-in;\r\n    padding-right: 20px;\r\n\r\n    a {\r\n      display: inline-block;\r\n      vertical-align: top;\r\n      text-align: center;\r\n\r\n      color: rebeccapurple;\r\n      &:hover {\r\n        color: blue;\r\n      }\r\n      &:active {\r\n        color: yellow;\r\n      }\r\n    }\r\n  }\r\n\r\n  //PINNED TASKS\r\n  &.TASK_PINNED .icon-star {\r\n    color: blue;\r\n  }\r\n\r\n  &.TASK_ARCHIVED input[type=\"text\"] {\r\n    color: orange;\r\n  }\r\n\r\n  &:hover {\r\n    background-image: linear-gradient(to bottom, #e5f9f7 0%, #f0fffd 100%);\r\n\r\n    .checkbox {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  // Border between list items\r\n  & + .list-item {\r\n    border-top: 1px solid #f0f9fb;\r\n  }\r\n\r\n  // Checked\r\n  &.checked {\r\n    input[type=\"text\"] {\r\n      color: orange;\r\n      text-decoration: line-through;\r\n    }\r\n\r\n    .delete-item {\r\n      display: inline-block;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./task.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"list-item {{ task?.state }}\">\r\n  <label class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n      name=\"checked\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n  </label>\r\n  <div class=\"title\">\r\n    <input\r\n      type=\"text\"\r\n      [value]=\"task.title\"\r\n      placeholder=\"Input title\"\r\n      (keydown.enter)=\"onKeyDownEvent($event)\"\r\n    />\r\n  </div>\r\n  <div class=\"actions\">\r\n    <a *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" (click)=\"onPin(task.id)\">\r\n      <span class=\"icon-star\"></span>\r\n    </a>\r\n  </div>\r\n</div>\r\n<div *ngFor=\"let item of tasks; index as i;\">\r\n  {{item.title}} {{item.state}}\r\n</div>\r\n<app-counter-component [counter]=\"counter\" (componentClick)=\"handleOnClick()\"></app-counter-component>\r\n<ui-primary-button [backgroundColor]=\"'#ffd11a'\" (onClicked)=\"onClick($event)\" [disabled]=\"false\" [text]=\"'button'\"></ui-primary-button>\r\n\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-13d7b39e76911e19d42c878cf8582128",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-todo-app/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { PrimaryButtonModule } from 'projects/primary-button/src/lib/primary-button.module';\nimport { ReactComponentWrapperComponent } from 'projects/react-components/counter-component/ReactComponentWrapper';\nimport { TaskComponent } from './components/task/task.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TaskComponent,\n    ReactComponentWrapperComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    PrimaryButtonModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ReactComponentWrapperComponent"
                        },
                        {
                            "name": "TaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "PrimaryButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-771c4dee79857434938c19b7bb0cdc2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-todo-app/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrimaryButtonModule",
            "id": "module-PrimaryButtonModule-97bfc84666b6ec64ae9ed26ddb2de9e2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/primary-button/src/lib/primary-button.module.ts",
            "methods": [],
            "sourceCode": "import { ButtonModule } from '@syncfusion/ej2-angular-buttons';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PrimaryButtonComponent } from './primary-button.component';\n\n@NgModule({\n  declarations: [PrimaryButtonComponent],\n  imports: [\n    CommonModule,\n    ButtonModule\n  ],\n  exports: [PrimaryButtonComponent]\n})\nexport class PrimaryButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PrimaryButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PrimaryButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiCalendarModule",
            "id": "module-UiCalendarModule-2826c4302d4235353a5524a40004e6ad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/calendar/src/lib/calendar.module.ts",
            "methods": [],
            "sourceCode": "import { CalendarModule, DatePickerModule } from '@syncfusion/ej2-angular-calendars'\n\nimport { CalendarComponent } from './calendar.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [CalendarComponent],\n  imports: [CommonModule,\n    CalendarModule,\n    DatePickerModule\n  ],\n  exports: [CalendarComponent]\n})\nexport class UiCalendarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "containerElementName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/react-components/counter-component/ReactComponentWrapper.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'counterReactComponentContainer'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/calendar/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/primary-button/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-todo-app/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CounterComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/react-components/counter-component/CounterComponent.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FunctionComponent<IMyComponentProps>",
                "defaultValue": "(props: IMyComponentProps) => {\r\n\r\n  const {counter: propsCounter, onClick} = props;\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  return <div className={`counter-component`}>\r\n    <div className={'comp-props'}>Tasks counter: {propsCounter}\r\n      <span onClick={handleClick}\r\n            className={'increase-button'}>Remove last one</span>\r\n    </div>\r\n  </div>;\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-todo-app/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-todo-app/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/calendar/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/primary-button/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-todo-app/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PrimaryButtonComponent>",
                "defaultValue": "(args: PrimaryButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CalendarComponent>",
                "defaultValue": "args => ({\n  props: {\n    ...args\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TaskComponent>",
                "defaultValue": "args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: actionsData.onPinTask,\r\n    onArchiveTask: actionsData.onArchiveTask,\r\n  },\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "stories/Task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TaskComponent>",
                    "defaultValue": "args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: actionsData.onPinTask,\r\n    onArchiveTask: actionsData.onArchiveTask,\r\n  },\r\n})"
                }
            ],
            "projects/react-components/counter-component/ReactComponentWrapper.tsx": [
                {
                    "name": "containerElementName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/react-components/counter-component/ReactComponentWrapper.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'counterReactComponentContainer'"
                }
            ],
            "projects/calendar/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/calendar/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/calendar/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/primary-button/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/primary-button/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/primary-button/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/web-todo-app/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-todo-app/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-todo-app/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/react-components/counter-component/CounterComponent.tsx": [
                {
                    "name": "CounterComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/react-components/counter-component/CounterComponent.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FunctionComponent<IMyComponentProps>",
                    "defaultValue": "(props: IMyComponentProps) => {\r\n\r\n  const {counter: propsCounter, onClick} = props;\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  return <div className={`counter-component`}>\r\n    <div className={'comp-props'}>Tasks counter: {propsCounter}\r\n      <span onClick={handleClick}\r\n            className={'increase-button'}>Remove last one</span>\r\n    </div>\r\n  </div>;\r\n}"
                }
            ],
            "stories/Calendar.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CalendarComponent>",
                    "defaultValue": "args => ({\n  props: {\n    ...args\n  },\n})"
                }
            ],
            "projects/web-todo-app/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-todo-app/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "projects/web-todo-app/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-todo-app/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PrimaryButtonComponent>",
                    "defaultValue": "(args: PrimaryButtonComponent) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/web-todo-app/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/calendar/src/lib/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/calendar/src/lib/calendar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CalendarService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/calendar/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/calendar/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/primary-button/src/lib/primary-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrimaryButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/primary-button/src/lib/primary-button.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PrimaryButtonService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/primary-button/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/primary-button/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/react-components/counter-component/CounterComponent.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "IMyComponentProps",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/react-components/counter-component/CounterComponent.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/react-components/counter-component/ReactComponentWrapper.tsx",
                "type": "component",
                "linktype": "component",
                "name": "ReactComponentWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/react-components/counter-component/ReactComponentWrapper.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "containerElementName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-todo-app/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-todo-app/src/app/components/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-todo-app/src/app/components/task/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-todo-app/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-todo-app/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-todo-app/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-todo-app/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}